스트림 

컬렉션과 스트림 방식을 각각 사용하여 0~29사이의 난수 20개 중 10보다 큰 난수를 찾아 정렬한 후 출력

package Sec01;

import java.util.Random;
import java.util.*;
public class StreamDemo {

	public static void main(String[] args) {
		List<Integer> list = new ArrayList<Integer>();
		Random r = new Random();
		for(int i =0 ; i<10; i++)
			list.add(r.nextInt(30)); // 0~29 사이의 정수로 된 난수를 생성하여 list에 추가한다
		System.out.println(list);
		
		//list 자료에서 10이상되는 자료만 복사해서 새로 리스트를 만든다
		
		//컬렉션으로 처리
		
		List<Integer> gt10 = new ArrayList<>(); // 컬렉션에서 사용할 공간으로 10보다 큰 난수를 저장한다.
		for(int i : list)
			if(i>10)
				gt10.add(i);    // list의 원소 중에서 100보다 큰 원소만 gt10에 추가한다.
		
		Collections.sort(gt10);    // 난수로 생성된 gt10들을 오름차순으로 정렬시킨다.
		System.out.println(gt10);
		
		
		//스트림으로 처리
		
		list.stream()     //컬렉션에서 스트림을 생성한다.
		.filter(i -> i > 10)	//10 보다 큰 원소만 추출한다.
		.sorted()			//정렬한다
		.forEach(x -> System.out.print( x + " " ));   //원소를 하나씩 출력한다.
		
	}

}


=============================================================================================================================================

배열 데이터의 스트림 사용( 홀수 추출, ~ 이상 단어 추출, ~이상 수 추출)

package Sec02;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class Array2StreamDemo {

	public static void main(String[] args) {
		
		int[] ia = {2,3,5,7,11,13};
		IntStream is = Arrays.stream(ia);  // 정수 배열을 사용하여 IntStream을 생성한다.
		List<Integer> li =
		is.filter(x -> (x%2 == 1)).boxed().collect(Collectors.toList()); // 컬렉션에서 boxed로 쌓아서 객체로 만들고 홀수만 추출한다.
		System.out.println(li);
		
		String[] strings = { "The", "pen", "is", "mighter", "than", "the", "sword"};
		
		Stream<String> ss = Stream.of(strings);   // String 배열을 사용하여 Stream<String>을 생성한다.
		
		List<String> ls = ss.filter(s->s.length() >3).collect(Collectors.toList()); // 컬렉션에서 strings의 길이가 3이상인 단어를 추출한다.
		
		System.out.println(ls);
	
		double [] da = {1.2, 3.14, 5.8 , 0.2};
		DoubleStream ds = DoubleStream.of(da); //실수 배열을 사용하여 DoubleSteam을 생성한다
		List<Double> ld = ds.filter(d ->d>3).boxed().collect(Collectors.toList()); // 컬렉션에서 boxed로 개체로 만들고 d의 크기가 3 이상인 것만 추출
		System.out.println(ld);
		

	}

}


=============================================================================================================================================

기타 데이터의 스트림 이용( 원소 생성)

package Sec02;
import java.util.*;
import java.util.stream.IntStream;
import java.util.stream.Stream;
public class Etc2StreamDemo {

	public static void main(String[] args) {
		
		IntStream is1 = IntStream.iterate(1, x->x+2).limit(10); // 첫 원소가 1이며, 다음 원소부터는 람다식에 의하여 3,5,7등이 생성 limit으로 10개의 원소만 생성
		
		is1.forEach( e -> System.out.print( e + " "));
		System.out.println();
		
		new Random().ints(0,10);//0~10 사이의 정수인 난수를 생성

		Stream.generate(Math::random).limit(10); //Math의 random() 매서드로 랜덤 원소 생성 limit으로 10개의 원소만 생성;
		for(int i=0; i<=10;i++)
			System.out.print(i+ " ");
		
		System.out.println();
		IntStream.rangeClosed(1, 10).forEach(e -> System.out.print( e + " "));//정수 1부터 10까지 생성 그리고 출력
		
	}

}

===============================================================================================================================

1~5 사이의 정수로 구성된 IntStream에서 짝수만 제곱하라

package Sec03;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class Laziness1Demo {

	public static void main(String[] args) {
		
		IntStream is = IntStream.rangeClosed(1, 5); //1부터 5까지의 정수를 생성
		// is.forEach(e -> System.out.print(e));
		System.out.println("");
		
		is.filter( x -> {
			System.out.println("filter : " + x);
			return x %2 == 0; // 2의 배수만 빼내어 다음 스트림으로 전달
			
		}).map(x -> {
			
			System.out.println(" map : " + x );
			return x*x ;// 전달받은 원소를 제곱한다.
			
		}).boxed().collect(Collectors.toList());// 객체로 list 생성

	}

}

===============================================================================================================================
